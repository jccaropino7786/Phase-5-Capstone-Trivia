{"ast":null,"code":"var _jsxFileName = \"/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TriviaGame = () => {\n  _s();\n\n  const [showResults, setShowResults] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState([0]);\n  const [score, setScore] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // const resp = await fetch(\"https://opentdb.com/api.php?amount=2&type=multiple\")\n        const resp = await fetch(\"https://the-trivia-api.com/api/questions?limit=20&categories=science,history'\");\n        const questionsList = await resp.json();\n        console.log(questionsList[0].question);\n        setQuestions(questionsList);\n        setCurrentQuestion(questionsList[0].question);\n      } catch (error) {\n        alert(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n  console.log(questions);\n  console.log(currentQuestion);\n\n  const optionClicked = isCorrect => {\n    // Increment the score\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Trivia Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"score\",\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this), showResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Final Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [score, \" out of \", questions.length, \" correct - (\", score / questions.length * 100, \"%)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Question: \", currentQuestion + 1, \" out of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"question-text\",\n        children: questions[currentQuestion]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TriviaGame, \"B3R+j/V5mysPvrppRqEOyzDwi/M=\");\n\n_c = TriviaGame;\nexport default TriviaGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TriviaGame\");","map":{"version":3,"sources":["/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js"],"names":["React","useState","useEffect","TriviaGame","showResults","setShowResults","currentQuestion","setCurrentQuestion","score","setScore","questions","setQuestions","fetchData","resp","fetch","questionsList","json","console","log","question","error","alert","optionClicked","isCorrect","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,CAAC,CAAD,CAAD,CAAtD;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF;AACA,cAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,+EAAD,CAAxB;AACA,cAAMC,aAAa,GAAG,MAAMF,IAAI,CAACG,IAAL,EAA5B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,aAAa,CAAC,CAAD,CAAb,CAAiBI,QAA7B;AACAR,QAAAA,YAAY,CAACI,aAAD,CAAZ;AACAR,QAAAA,kBAAkB,CAACQ,aAAa,CAAC,CAAD,CAAb,CAAiBI,QAAlB,CAAlB;AACD,OAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACD,KAXF;;AAYAR,IAAAA,SAAS;AACV,GAdM,EAcL,EAdK,CAAT;AAkBEK,EAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYZ,eAAZ;;AAEA,QAAMgB,aAAa,GAAIC,SAAD,IAAe;AACnC;AACA,QAAIA,SAAJ,EAAe;AACbd,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,QAAIF,eAAe,GAAG,CAAlB,GAAsBI,SAAS,CAACc,MAApC,EAA4C;AAC1CjB,MAAAA,kBAAkB,CAACD,eAAe,GAAG,CAAnB,CAAlB;AACD,KAFD,MAEO;AACLD,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAXD;;AAaF,sBACI;AAAA,4BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA,4BAA8BG,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,EAIGJ,WAAW,gBACV;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,eAEG;AAAA,mBACCI,KADD,cACgBE,SAAS,CAACc,MAD1B,kBAEDhB,KAAK,GAAGE,SAAS,CAACc,MAAnB,GAA6B,GAF3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,gBAST;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BAEE;AAAA,iCACWlB,eAAe,GAAG,CAD7B,cACwCI,SAAS,CAACc,MADlD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAKC;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA,kBAA+Bd,SAAS,CAACJ,eAAD;AAAxC;AAAA;AAAA;AAAA;AAAA,cALD;AAAA;AAAA;AAAA;AAAA;AAAA,YAbL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCD,CAjFH;;GAAMH,U;;KAAAA,U;AAmFN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TriviaGame = () => {\n\n    const [showResults, setShowResults] = useState(false);\n    const [currentQuestion, setCurrentQuestion] = useState([0]);\n    const [score, setScore] = useState(0);\n    const [questions, setQuestions] = useState([])\n    \n    useEffect(() => {\n        const fetchData = async () => {\n          try {\n            // const resp = await fetch(\"https://opentdb.com/api.php?amount=2&type=multiple\")\n            const resp = await fetch(\"https://the-trivia-api.com/api/questions?limit=20&categories=science,history'\")\n            const questionsList = await resp.json()\n            console.log(questionsList[0].question)\n            setQuestions(questionsList)\n            setCurrentQuestion(questionsList[0].question)\n          } catch (error) {\n            alert(error)\n          }\n         }\n        fetchData()  \n      },[])\n\n      \n   \n      console.log(questions)\n      console.log(currentQuestion)\n\n      const optionClicked = (isCorrect) => {\n        // Increment the score\n        if (isCorrect) {\n          setScore(score + 1);\n        }\n    \n        if (currentQuestion + 1 < questions.length) {\n          setCurrentQuestion(currentQuestion + 1);\n        } else {\n          setShowResults(true);\n        }\n      };\n  \n    return (\n        <div>\n           <h1>Trivia Game</h1>\n           <h2 className='score'>Score: {score}</h2>\n\n          {showResults? (\n            <div className=\"final-results\">\n               <h1>Final Results</h1>\n               <h2>\n               {score} out of {questions.length} correct - (\n            {(score / questions.length) * 100}%)\n               </h2>\n             </div>\n             ) : (\n             <div className=\"question-card\">\n               \n               <h2>\n               Question: {currentQuestion + 1} out of {questions.length}\n               </h2>\n              <h3 className=\"question-text\">{questions[currentQuestion]}</h3>\n     \n               {/* I need to create code that brings the correct and incorrect answers together */}\n               {/* <ul classname=\"quiz-ul\">\n               {questions[currentQuestion].options.map((option) => {\n                    return (\n                        <li className=\"quiz-li\"\n                            key={option.id}\n                            onClick={() => optionClicked(option.isCorrect)}\n                        >\n                            {option.text}\n                        </li>\n                );\n                    })}  \n               </ul> */}\n               \n             </div>\n             )}\n           \n         </div>\n       );\n  }\n\nexport default TriviaGame;"]},"metadata":{},"sourceType":"module"}