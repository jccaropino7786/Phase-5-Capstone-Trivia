{"ast":null,"code":"var _jsxFileName = \"/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TriviaGame = () => {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState({});\n  const [userAnswer, setUserAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const response = await fetch('/https://the-trivia-api.com/api/questions?limit=20&region=US&difficulty=easy');\n      const data = await response.json();\n      setQuestions(data.results);\n      setCurrentQuestion(data.results[0]);\n    };\n\n    fetchQuestions();\n  }, []);\n\n  const checkAnswer = () => {\n    if (userAnswer === currentQuestion.correct_answer) {\n      setScore(score + 1);\n      const nextQuestionIndex = questions.indexOf(currentQuestion) + 1;\n\n      if (nextQuestionIndex < questions.length) {\n        setCurrentQuestion(questions[nextQuestionIndex]);\n        setUserAnswer('');\n      } else {\n        setIsGameOver(true);\n      }\n    } else {\n      setIsGameOver(true);\n    }\n  };\n\n  const handleAnswerChange = event => {\n    setUserAnswer(event.target.value);\n  };\n\n  if (isGameOver) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your final score is \", score, \" out of \", questions.length, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Trivia Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Question \", questions.indexOf(currentQuestion) + 1, \" of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentQuestion.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: currentQuestion.incorrectAnswers.map(answer => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"answer\",\n            value: answer,\n            onChange: handleAnswerChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), answer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, answer, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkAnswer,\n      children: \"Submit Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TriviaGame, \"Yer2I8J/rmN/MSG0UoVmianFHTk=\");\n\n_c = TriviaGame;\nexport default TriviaGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TriviaGame\");","map":{"version":3,"sources":["/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js"],"names":["React","useState","useEffect","TriviaGame","questions","setQuestions","currentQuestion","setCurrentQuestion","userAnswer","setUserAnswer","score","setScore","isGameOver","setIsGameOver","fetchQuestions","response","fetch","data","json","results","checkAnswer","correct_answer","nextQuestionIndex","indexOf","length","handleAnswerChange","event","target","value","question","incorrectAnswers","map","answer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TriviaGame = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState({});\n  const [userAnswer, setUserAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const response = await fetch('/https://the-trivia-api.com/api/questions?limit=20&region=US&difficulty=easy');\n      const data = await response.json();\n      setQuestions(data.results);\n      setCurrentQuestion(data.results[0]);\n    }\n    fetchQuestions();\n  }, []);\n\n  const checkAnswer = () => {\n    if (userAnswer === currentQuestion.correct_answer) {\n      setScore(score + 1);\n      const nextQuestionIndex = questions.indexOf(currentQuestion) + 1;\n      if (nextQuestionIndex < questions.length) {\n        setCurrentQuestion(questions[nextQuestionIndex]);\n        setUserAnswer('');\n      } else {\n        setIsGameOver(true);\n      }\n    } else {\n      setIsGameOver(true);\n    }\n  }\n\n  const handleAnswerChange = (event) => {\n    setUserAnswer(event.target.value);\n  }\n\n  if (isGameOver) {\n    return (\n      <div>\n        <h2>Game Over</h2>\n        <p>Your final score is {score} out of {questions.length}.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h2>Trivia Game</h2>\n      <p>Question {questions.indexOf(currentQuestion) + 1} of {questions.length}</p>\n      <p>{currentQuestion.question}</p>\n      <ul>\n        {currentQuestion.incorrectAnswers.map(answer => (\n          <li key={answer}>\n            <label>\n              <input type=\"radio\" name=\"answer\" value={answer} onChange={handleAnswerChange} />\n              {answer}\n            </label>\n          </li>\n        ))}\n      </ul>\n      <button onClick={checkAnswer}>Submit Answer</button>\n      <p>Score: {score}</p>\n    </div>\n  );\n}\n\nexport default TriviaGame;"]},"metadata":{},"sourceType":"module"}