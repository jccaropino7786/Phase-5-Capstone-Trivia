{"ast":null,"code":"var _jsxFileName = \"/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TriviaGame = () => {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState({});\n  const [userAnswer, setUserAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false); //   useEffect(() => {\n  //     const fetchQuestions = async () => {\n  //       const response = await fetch('');\n  //       const data = await response.json();\n  //       setQuestions(data.results);\n  //       setCurrentQuestion(data.results[0]);\n  //     }\n  //     fetchQuestions();\n  //   }, []);\n\n  const checkAnswer = () => {\n    if (userAnswer === currentQuestion.correct_answer) {\n      setScore(score + 1);\n      const nextQuestionIndex = questions.indexOf(currentQuestion) + 1;\n\n      if (nextQuestionIndex < questions.length) {\n        setCurrentQuestion(questions[nextQuestionIndex]);\n        setUserAnswer('');\n      } else {\n        setIsGameOver(true);\n      }\n    } else {\n      setIsGameOver(true);\n    }\n  };\n\n  const handleAnswerChange = event => {\n    setUserAnswer(event.target.value);\n  };\n\n  if (isGameOver) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your final score is \", score, \" out of \", questions.length, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Trivia Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TriviaGame, \"pu99OvH72yZKsaVaE3WFrKdzUks=\");\n\n_c = TriviaGame;\nexport default TriviaGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TriviaGame\");","map":{"version":3,"sources":["/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js"],"names":["React","useState","useEffect","TriviaGame","questions","setQuestions","currentQuestion","setCurrentQuestion","userAnswer","setUserAnswer","score","setScore","isGameOver","setIsGameOver","checkAnswer","correct_answer","nextQuestionIndex","indexOf","length","handleAnswerChange","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C,CALuB,CAOzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,QAAMa,WAAW,GAAG,MAAM;AACxB,QAAIN,UAAU,KAAKF,eAAe,CAACS,cAAnC,EAAmD;AACjDJ,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACA,YAAMM,iBAAiB,GAAGZ,SAAS,CAACa,OAAV,CAAkBX,eAAlB,IAAqC,CAA/D;;AACA,UAAIU,iBAAiB,GAAGZ,SAAS,CAACc,MAAlC,EAA0C;AACxCX,QAAAA,kBAAkB,CAACH,SAAS,CAACY,iBAAD,CAAV,CAAlB;AACAP,QAAAA,aAAa,CAAC,EAAD,CAAb;AACD,OAHD,MAGO;AACLI,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,KATD,MASO;AACLA,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAbD;;AAeA,QAAMM,kBAAkB,GAAIC,KAAD,IAAW;AACpCX,IAAAA,aAAa,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAIA,MAAIV,UAAJ,EAAgB;AACd,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,2CAAwBF,KAAxB,cAAuCN,SAAS,CAACc,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAED,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAhED;;GAAMf,U;;KAAAA,U;AAkEN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TriviaGame = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState({});\n  const [userAnswer, setUserAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n//   useEffect(() => {\n//     const fetchQuestions = async () => {\n//       const response = await fetch('');\n//       const data = await response.json();\n//       setQuestions(data.results);\n//       setCurrentQuestion(data.results[0]);\n//     }\n//     fetchQuestions();\n//   }, []);\n\n  const checkAnswer = () => {\n    if (userAnswer === currentQuestion.correct_answer) {\n      setScore(score + 1);\n      const nextQuestionIndex = questions.indexOf(currentQuestion) + 1;\n      if (nextQuestionIndex < questions.length) {\n        setCurrentQuestion(questions[nextQuestionIndex]);\n        setUserAnswer('');\n      } else {\n        setIsGameOver(true);\n      }\n    } else {\n      setIsGameOver(true);\n    }\n  }\n\n  const handleAnswerChange = (event) => {\n    setUserAnswer(event.target.value);\n  }\n\n  if (isGameOver) {\n    return (\n      <div>\n        <h2>Game Over</h2>\n        <p>Your final score is {score} out of {questions.length}.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h2>Trivia Game</h2>\n      {/* <p>Question {questions.indexOf(currentQuestion) + 1} of {questions.length}</p>\n      <p>{currentQuestion.question}</p>\n      <ul>\n        {currentQuestion.incorrect_answers.map(answer => (\n          <li key={answer}>\n            <label>\n              <input type=\"radio\" name=\"answer\" value={answer} onChange={handleAnswerChange} />\n              {answer}\n            </label>\n          </li>\n        ))}\n      </ul>\n      <button onClick={checkAnswer}>Submit Answer</button>\n      <p>Score: {score}</p> */}\n    </div>\n  );\n}\n\nexport default TriviaGame;"]},"metadata":{},"sourceType":"module"}