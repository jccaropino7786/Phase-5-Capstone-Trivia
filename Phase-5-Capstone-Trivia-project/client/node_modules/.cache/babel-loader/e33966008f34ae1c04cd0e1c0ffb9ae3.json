{"ast":null,"code":"var _jsxFileName = \"/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TriviaGame = () => {\n  _s();\n\n  const [showResults, setShowResults] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const resp = await fetch(\"/user_games\");\n        const highScoreList = await resp.json();\n        setQuestions(highScoreList);\n      } catch (error) {\n        alert(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Trivia Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"score\",\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this), showResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Final Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [score, \" out of \", questions.length, \" correct - (\", score / questions.length * 100, \"%)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Question: \", currentQuestion + 1, \" out of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"question-text\",\n        children: questions[currentQuestion].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        classname: \"quiz-ul\",\n        children: questions[currentQuestion].options.map(option => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"quiz-li\",\n            onClick: () => optionClicked(option.isCorrect),\n            children: option.text\n          }, option.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TriviaGame, \"d3b9xwI5ASiAJElmPqxHKOiaFFo=\");\n\n_c = TriviaGame;\nexport default TriviaGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TriviaGame\");","map":{"version":3,"sources":["/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js"],"names":["React","useState","useEffect","TriviaGame","showResults","setShowResults","currentQuestion","setCurrentQuestion","score","setScore","questions","setQuestions","fetchData","resp","fetch","highScoreList","json","error","alert","length","text","options","map","option","optionClicked","isCorrect","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,aAAD,CAAxB;AACA,cAAMC,aAAa,GAAG,MAAMF,IAAI,CAACG,IAAL,EAA5B;AACAL,QAAAA,YAAY,CAACI,aAAD,CAAZ;AACD,OAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACD,KARF;;AASAL,IAAAA,SAAS;AACV,GAXM,EAWL,EAXK,CAAT;AAaA,sBACI;AAAA,4BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA,4BAA8BJ,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,EAIGJ,WAAW,gBACV;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,eAEG;AAAA,mBACCI,KADD,cACgBE,SAAS,CAACS,MAD1B,kBAEDX,KAAK,GAAGE,SAAS,CAACS,MAAnB,GAA6B,GAF3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,gBAST;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BAEE;AAAA,iCACWb,eAAe,GAAG,CAD7B,cACwCI,SAAS,CAACS,MADlD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA,kBAA+BT,SAAS,CAACJ,eAAD,CAAT,CAA2Bc;AAA1D;AAAA;AAAA;AAAA;AAAA,cALF,eAQE;AAAI,QAAA,SAAS,EAAC,SAAd;AAAA,kBACCV,SAAS,CAACJ,eAAD,CAAT,CAA2Be,OAA3B,CAAmCC,GAAnC,CAAwCC,MAAD,IAAY;AAC/C,8BACI;AAAI,YAAA,SAAS,EAAC,SAAd;AAEI,YAAA,OAAO,EAAE,MAAMC,aAAa,CAACD,MAAM,CAACE,SAAR,CAFhC;AAAA,sBAIKF,MAAM,CAACH;AAJZ,aACSG,MAAM,CAACG,EADhB;AAAA;AAAA;AAAA;AAAA,kBADJ;AAQC,SATL;AADD;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCD,CA5DH;;GAAMvB,U;;KAAAA,U;AA8DN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TriviaGame = () => {\n\n    const [showResults, setShowResults] = useState(false);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [score, setScore] = useState(0);\n    const [questions, setQuestions] = useState([])\n    \n    useEffect(() => {\n        const fetchData = async () => {\n          try {\n            const resp = await fetch(\"/user_games\")\n            const highScoreList = await resp.json()\n            setQuestions(highScoreList)\n          } catch (error) {\n            alert(error)\n          }\n         }\n        fetchData()  \n      },[])\n  \n    return (\n        <div>\n           <h1>Trivia Game</h1>\n           <h2 className='score'>Score: {score}</h2>\n\n          {showResults? (\n            <div className=\"final-results\">\n               <h1>Final Results</h1>\n               <h2>\n               {score} out of {questions.length} correct - (\n            {(score / questions.length) * 100}%)\n               </h2>\n             </div>\n             ) : (\n             <div className=\"question-card\">\n               \n               <h2>\n               Question: {currentQuestion + 1} out of {questions.length}\n               </h2>\n               <h3 className=\"question-text\">{questions[currentQuestion].text}</h3>\n     \n               \n               <ul classname=\"quiz-ul\">\n               {questions[currentQuestion].options.map((option) => {\n                    return (\n                        <li className=\"quiz-li\"\n                            key={option.id}\n                            onClick={() => optionClicked(option.isCorrect)}\n                        >\n                            {option.text}\n                        </li>\n                );\n                    })} \n               </ul>\n               \n             </div>\n             )}\n           \n         </div>\n       );\n  }\n\nexport default TriviaGame;"]},"metadata":{},"sourceType":"module"}