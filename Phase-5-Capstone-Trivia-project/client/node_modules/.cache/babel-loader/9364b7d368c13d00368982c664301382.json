{"ast":null,"code":"var _jsxFileName = \"/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TriviaGame = () => {\n  _s();\n\n  const [triviaQuestion, setTriviaQuestion] = useState([]);\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\n  const [currentPoints, setCurrentPoints] = useState(0);\n  const [allPossibleAnswers, setAllPossibleAnswers] = useState([]);\n  const [loading, setLoading] = useState(false); //combines correct and incorrect answer into single array\n\n  async function combineAllAnswers(incorrectAnswers, correctAnswer) {\n    let allAnswers = [];\n    incorrectAnswers.map(item => {\n      item.incorrect_answers.map(incorrectAnswer => {\n        allAnswers.push(incorrectAnswer);\n      });\n    });\n    allAnswers.push(correctAnswer); //Randomize order of answers in array\n\n    allAnswers.sort(() => Math.random() - 0.5);\n    setAllPossibleAnswers(allAnswers);\n  } //Make api call to trivia api\n\n\n  async function getTriviaData() {\n    //Set loading boolean to true so that we know to show loading text\n    setLoading(true); //Make trivia api call using axios\n\n    const resp = await fetch(\"https://opentdb.com/api.php?amount=1\");\n    setTriviaQuestion(resp.data.results);\n    setCorrectAnswer(resp.data.results[0].correct_answer); //Combines correct and incorrect answers into single array\n\n    await combineAllAnswers(resp.data.results, resp.data.results[0].correct_answer); //Set loading boolean to false so that we know to show trivia question\n\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    getTriviaData();\n  }, []);\n\n  function verifyAnswer(selectedAnswer) {\n    //If the selected answer equals the correct answer, then we get the next trivia quesiton and increase the current points by 1\n    if (selectedAnswer === correctAnswer) {\n      getTriviaData();\n      setCurrentPoints(currentPoints + 1);\n    } else {\n      //If the selected answer does not equal the correct answer, decreaes the current points by 1\n      setCurrentPoints(currentPoints - 1);\n    }\n  } //Converts html code to regular characters\n\n\n  function removeCharacters(question) {\n    return question.replace(/(&quot\\;)/g, \"\\\"\").replace(/(&rsquo\\;)/g, \"\\\"\").replace(/(&#039\\;)/g, \"\\'\").replace(/(&amp\\;)/g, \"\\\"\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n};\n\n_s(TriviaGame, \"XzQFlxcxtEazhmVL/YIljhx24rA=\");\n\n_c = TriviaGame;\nexport default TriviaGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TriviaGame\");","map":{"version":3,"sources":["/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js"],"names":["React","useState","useEffect","TriviaGame","triviaQuestion","setTriviaQuestion","correctAnswer","setCorrectAnswer","currentPoints","setCurrentPoints","allPossibleAnswers","setAllPossibleAnswers","loading","setLoading","combineAllAnswers","incorrectAnswers","allAnswers","map","item","incorrect_answers","incorrectAnswer","push","sort","Math","random","getTriviaData","resp","fetch","data","results","correct_answer","verifyAnswer","selectedAnswer","removeCharacters","question","replace"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC,CANqB,CAQrB;;AACA,iBAAea,iBAAf,CAAiCC,gBAAjC,EAAmDT,aAAnD,EAAkE;AAChE,QAAIU,UAAU,GAAG,EAAjB;AACAD,IAAAA,gBAAgB,CAACE,GAAjB,CAAsBC,IAAD,IAAU;AAC7BA,MAAAA,IAAI,CAACC,iBAAL,CAAuBF,GAAvB,CAA4BG,eAAD,IAAqB;AAC9CJ,QAAAA,UAAU,CAACK,IAAX,CAAgBD,eAAhB;AACD,OAFD;AAGD,KAJD;AAKAJ,IAAAA,UAAU,CAACK,IAAX,CAAgBf,aAAhB,EAPgE,CAQhE;;AACAU,IAAAA,UAAU,CAACM,IAAX,CAAgB,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAtC;AACAb,IAAAA,qBAAqB,CAACK,UAAD,CAArB;AACD,GApBoB,CAsBrB;;;AACA,iBAAeS,aAAf,GAA+B;AAC7B;AACAZ,IAAAA,UAAU,CAAC,IAAD,CAAV,CAF6B,CAI7B;;AACA,UAAMa,IAAI,GAAG,MAAMC,KAAK,CAAC,sCAAD,CAAxB;AAEAtB,IAAAA,iBAAiB,CAACqB,IAAI,CAACE,IAAL,CAAUC,OAAX,CAAjB;AACAtB,IAAAA,gBAAgB,CAACmB,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkB,CAAlB,EAAqBC,cAAtB,CAAhB,CAR6B,CAU7B;;AACA,UAAMhB,iBAAiB,CAACY,IAAI,CAACE,IAAL,CAAUC,OAAX,EAAoBH,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkB,CAAlB,EAAqBC,cAAzC,CAAvB,CAX6B,CAa7B;;AACAjB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAEDX,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASM,YAAT,CAAsBC,cAAtB,EAAsC;AACpC;AACA,QAAIA,cAAc,KAAK1B,aAAvB,EAAsC;AACpCmB,MAAAA,aAAa;AACbhB,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACD,KAHD,MAGO;AACL;AACAC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACD;AACF,GArDoB,CAuDrB;;;AACA,WAASyB,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,WAAOA,QAAQ,CAACC,OAAT,CAAiB,YAAjB,EAA+B,IAA/B,EAAqCA,OAArC,CAA6C,aAA7C,EAA4D,IAA5D,EAAkEA,OAAlE,CAA0E,YAA1E,EAAwF,IAAxF,EAA8FA,OAA9F,CAAsG,WAAtG,EAAmH,IAAnH,CAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAjEH;;GAAMhC,U;;KAAAA,U;AAmEN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TriviaGame = () => {\n \n    const [triviaQuestion, setTriviaQuestion] = useState([]);\n    const [correctAnswer, setCorrectAnswer] = useState(\"\");\n    const [currentPoints, setCurrentPoints] = useState(0);\n    const [allPossibleAnswers, setAllPossibleAnswers] = useState([]);\n    const [loading, setLoading] = useState(false);\n  \n    //combines correct and incorrect answer into single array\n    async function combineAllAnswers(incorrectAnswers, correctAnswer) {\n      let allAnswers = [];\n      incorrectAnswers.map((item) => {\n        item.incorrect_answers.map((incorrectAnswer) => {\n          allAnswers.push(incorrectAnswer)\n        });\n      });\n      allAnswers.push(correctAnswer);\n      //Randomize order of answers in array\n      allAnswers.sort(() => Math.random() - 0.5);\n      setAllPossibleAnswers(allAnswers);\n    }\n  \n    //Make api call to trivia api\n    async function getTriviaData() {\n      //Set loading boolean to true so that we know to show loading text\n      setLoading(true);\n  \n      //Make trivia api call using axios\n      const resp = await fetch(\"https://opentdb.com/api.php?amount=1\");\n  \n      setTriviaQuestion(resp.data.results);\n      setCorrectAnswer(resp.data.results[0].correct_answer);\n  \n      //Combines correct and incorrect answers into single array\n      await combineAllAnswers(resp.data.results, resp.data.results[0].correct_answer);\n  \n      //Set loading boolean to false so that we know to show trivia question\n      setLoading(false);\n    }\n  \n    useEffect(() => {\n      getTriviaData();\n    }, []);\n  \n    function verifyAnswer(selectedAnswer) {\n      //If the selected answer equals the correct answer, then we get the next trivia quesiton and increase the current points by 1\n      if (selectedAnswer === correctAnswer) {\n        getTriviaData();\n        setCurrentPoints(currentPoints + 1);\n      } else {\n        //If the selected answer does not equal the correct answer, decreaes the current points by 1\n        setCurrentPoints(currentPoints - 1);\n      }\n    }\n  \n    //Converts html code to regular characters\n    function removeCharacters(question) {\n      return question.replace(/(&quot\\;)/g, \"\\\"\").replace(/(&rsquo\\;)/g, \"\\\"\").replace(/(&#039\\;)/g, \"\\'\").replace(/(&amp\\;)/g, \"\\\"\");\n    }\n  \n    return (\n      <div className=\"App\">\n        \n      </div>\n    );\n  }\n\nexport default TriviaGame;"]},"metadata":{},"sourceType":"module"}